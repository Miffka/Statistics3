x <- c(1:70)
x[1:length(x)%%7 != 0]
x[c(rep(T, 6), 7)]
x[c(rep(T, 6), F)]
x[1:length(x)%%7 > 0]
x <- c(-35:35)
x[1:length(x)%%7 != 0]
x[c(rep(T, 6), F)]
x[1:length(x)%%7 > 0]
x[-(1:floor(length(x)/7)*7)]
x[c(rep(T, 6), F)]
x[1:length(x)%%7 > 0] #
x[-(seq(7, length(x), by = 7))]
letters[c(1,23,5,19,15,13,5)]
divide <- function(x, y) {
x / y
}
divide <- function(x, y) {
x / y
}
divide <- function(x, y) {
return(x/y)
}
divide(1, 0)
divide(-99999, 0)
divide(0, 0)
divide(Inf, Inf)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
length(x[x > -0.2 & x < 0.3])
?floor
runif(100, min min = 1, max = 7)
runif(100, min = 1, max = 7)
floor(runif(100, min = 1, max = 7))
dice_roll <- function(n) {
x <- runif(n, min = 1, max = 7)
return(floor(x))
}
dice_roll(1e4)
n3 <- dice_roll(1e4)
n3[n3 ==7]
.libPaths()
installed.packages()
?installed.packages()
grid.newpage()
?grid.newpage()
library(grid)
?grid.newpage
grid.newpage()
grid.lines()
require(ggplot2)
install.packages("xts", dependencies = TRUE)
update.packages()
y
y
sessionInfo()
install.packages("randtoolbox")
library(randtoolbox)
1:5 + 0:1
1:10 + 3
(5:8)^2
1:4 >= 3
x <- seq(10, 100, by = 10)
?[]
?"[]"
?"["
x[]
x[1]
x[3:4]
x[c(8,7,3,6:8,x[1])]
x[-5]
x[-(2:6)]
x[c(-3, -5, -length(x), -5)]
x[rep(c(TRUE, FALSE), 5)]
x[c(TRUE, FALSE)]
x[x > 77 & x < 99]
names(x) <- c("one", "two", "three", "four", "five", "six", "seven", "eigth", "nine", "ten")
str(x)
x[c("one", "three")]
x[c("one", "forty")]
all(x < 200)
all(x > 20)
any(x == 100)
which(x >= 50)
which.min(x)
which.max(x)
y <- c(5, 3, 9)
names(x) <- c("V", "III", "IX")
attr(x, "author") <- "Caesar"
attributes(x)
attributes(y)
names(y) <- c("V", "III", "IX")
attr(y, "author") <- "Caesar"
attributes(y)
names(x) <- c("one", "two", "three", "four", "five", "six", "seven", "eigth", "nine", "ten")
str(y)
attributes(x) <- NULL
str(x)
attributes(y) <- NULL
str(y)
n21 <- 5
n22 <- 1:10
n23 <- 22:19
n24 <- c("A", "BBB", "Z")
n25 <- c("1", "99", "HI")
n26 <- c(TRUE, FALSE)
max(n21)
max(n22)
max(n23)
max(n24)
max(n25)
max(n25)
max(n26)
which(n21)
which(n22)
which(n26)
which(n25)
which.max(n21)
which.max(n22)
which.max(n23)
which.max(n24)
which.max(n25)
which.max(n26)
y <- vector(mode = "character", length = 100)
y <- character(100)
for (i in 1:100) {
if (i %% 15 == 0) {
y[i] <- "fizz buzz"
} else if (i %% 3 == 0) {
y[i] <- "fixx"
} else if (i %% 5 == 0) {
y[i] <- "buzz"
} else {
y[i] <- i
}
}
for (i in 1:100) {
if (i %% 15 == 0) {
y[i] <- "fizz buzz"
} else if (i %% 3 == 0) {
y[i] <- "fizz"
} else if (i %% 5 == 0) {
y[i] <- "buzz"
} else {
y[i] <- i
}
}
y
x <- 1:100
z <- 1:100
x %% 5
x %% 5 == 0
z[x %% 5 == 0] <- "buzz"
rm(list = c("n25", "n21"))
z[x %% 3 == 0] <- "fizz"
z[x %% 15 == 0] <- "fizz buzz"
all.equal(y, z)
x <- 2^(0:10)
log2(x)
set.seed(42)
x <- sample(1:100, 50)
x[-1]
x[-length(x)]
x[-1] - x[-length(x)]
which.max(abs(x[-1] - x[-length(x)]))
x[c(k, k+1)]
k <- which.max(abs(x[-1] - x[-length(x)]))
x[c(k, k+1)]
x <- sample(1:100, 50, replace = TRUE)
x
min(x)
which.min(x)
x[x == min(x)]
which(x == min(x))
maxdiff <- function(x) {
y <- abs(x[-1] - x[-length(x)])
k <- which(y == max(y))
print("First neighbor(s):")
print(x[k])
print("Second neighbor(s):")
print(x[k + 1])
print("Maximum absolute diff is:")
print(max(y))
}
xx <- sample(1:100, 1e4, replace = TRUE)
maxdiff(xx)
rm("x")
rm("k")
n51 <- c(0, 0, 3, 4, 4, 8)
n51[-1]-n[-length(n51)]
n51[-1]-n51[-length(n51)]
all((n51[-1]-n51[-length(n51)]) >= 0)
??"logical operations"
??"and"
??"and"
?"and"
??and
'??and'
fun5 <- function(x) {
return(xor(all((x[-1]-x[-length(x)]) >= 0), all((x[-1]-x[-length(x)]) <= 0))
}
fun5 <- function(x) {
return(xor(all((x[-1]-x[-length(x)]) >= 0), all((x[-1]-x[-length(x)]) <= 0)))
}
fun5(n51)
fun5(rep(0,10))
fun5 <- function(x) {
return(all((x[-1]-x[-length(x)]) >= 0) | all((x[-1]-x[-length(x)]) <= 0))
}
fun5(n51)
fun5(rep(0,10))
fun5(5)
?diff
diff(n51)
?function
?'function'
?`function`
?factorial
combin_count <- function(n, k, with_repetitions = FALSE) {
if (with_repetitions == TRUE) {
ans <- factorial(n+k-1)/(factorial(k)*factorial(n-1))
} else {
ans <- factorial(n)/(factorial(k)*factorial(n-k))
}
return(ans)
}
combin_count(1,5,with_repetitions = TRUE)
combin_count(2,5,with_repetitions = TRUE)
combin_count(2,5)
combin_count(5,2)
combin_count(5,2, with_repetitions = TRUE)
str(swiss)
shapiro.test(swiss[[2]])
task4 <- shapiro.test(swiss[[2]])
task4 <- shapiro.test(swiss[[2]])$p.value
sapply(swiss, function(x) shapiro.test(x)$p.value)
swiss[,-1]
sapply(swiss[,-1], function(x) shapiro.test(x)$p.value)
task4 <- sapply(swiss[,-1], function(x) shapiro.test(x)$p.value)
task4 <- task4[task4 > 0.05]
task4 <- names(task4[task4 > 0.05])
?subset
subset(swiss, names(swiss) %in% task4)
swiss[swiss %in% task4]
swiss[conames(swiss) %in% task4]
swiss[colnames(swiss) %in% task4]
?lm
lm(swiss[[1]] ~ ., swiss, colnames(swiss) %in% task4)
lm(swiss[[1]] ~ ., swiss[colnames(swiss) %in% task4])
task41 <- lm(swiss[[1]] ~ ., swiss[colnames(swiss) %in% task4])
task41 <- lm(swiss[[1]] ~ ., swiss[colnames(swiss) %in% task4])$coef
(task41 <- lm(swiss[[1]] ~ ., swiss[colnames(swiss) %in% task4])$coef)
smart_lm <- function(df){
nvec <- sapply(df[,-1], function(x) shapiro.test(x)$p.value)
nvec <- names(nvec[nvec > 0.05])
lm(df[[1]] ~ ., df[colnames(df) %in% nvec])
}
smart_lm <- function(df){
nvec <- sapply(df[,-1], function(x) shapiro.test(x)$p.value)
nvec <- names(nvec[nvec > 0.05])
lm(df[[1]] ~ ., df[colnames(df) %in% nvec])
}
smart_lm(swiss)
smart_lm <- function(df){
nvec <- sapply(df[,-1], function(x) shapiro.test(x)$p.value)
nvec <- names(nvec[nvec > 0.05])
lm(df[[1]] ~ ., df[colnames(df) %in% nvec])$coef
}
smart_lm(swiss)
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test.csv")
smart_lm(test_data)
length(swiss)
smart_lm <- function(df){
if (length(df) > 2) {
nvec <- sapply(df[,-1], function(x) shapiro.test(x)$p.value)
}
nvec <- names(nvec[nvec > 0.05])
lm(df[[1]] ~ ., df[colnames(df) %in% nvec])$coef
}
smart_lm <- function(df){
if (length(df) > 2) {
nvec <- sapply(df[,-1], function(x) shapiro.test(x)$p.value)
} else {
nvec <- shapiro.test(nvec)$p.value
}
nvec <- names(nvec[nvec > 0.05])
lm(df[[1]] ~ ., df[colnames(df) %in% nvec])$coef
}
smart_lm(test_data)
smart_lm <- function(df){
if (length(df) > 2) {
nvec <- sapply(df[,-1], function(x) shapiro.test(x)$p.value)
} else {
nvec <- shapiro.test(nvec)$p.value
}
nvec <- names(nvec[nvec > 0.05])
if (length(nvec) != 0) {
ans <- lm(df[[1]] ~ ., df[colnames(df) %in% nvec])$coef
} else {
ans <- "There are no normal variables in the data"
}
return(ans)
}
smart_lm(test_data)
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test.csv")
smart_lm <- function(df){
if (length(df) > 2) {
nvec <- sapply(df[,-1], function(x) shapiro.test(x)$p.value)
} else {
nvec <- shapiro.test(nvec)$p.value
}
nvec <- names(nvec[nvec > 0.05])
if (length(nvec) != 0) {
ans <- lm(df[[1]] ~ ., df[colnames(df) %in% nvec])$coef
} else {
ans <- "There are no normal variables in the data"
}
return(ans)
}
smart_lm(test_data)
smart_lm <- function(df){
if (length(df) > 2) {
nvec <- sapply(df[,-1], function(x) shapiro.test(x)$p.value)
} else {
nvec <- shapiro.test(df[, -1])$p.value
}
nvec <- names(nvec[nvec > 0.05])
if (length(nvec) != 0) {
ans <- lm(df[[1]] ~ ., df[colnames(df) %in% nvec])$coef
} else {
ans <- "There are no normal variables in the data"
}
return(ans)
}
smart_lm(test_data)
test_data <- data.frame(x = 1:100, y = 1:100, z = 1:100)
smart_lm(test_data)
str(iris)
numind <- colnames(iris)[sapply(df, is.numeric)]
numind <- colnames(iris)[sapply(iris, is.numeric)]
iris[numind]
t.test(iris[1], 10)
t.test(iris[[1]], 10)
iris[[1]]
t.test(iris[[1]], 5)
t.test(iris[[1]], mu=5)
task51 <- t.test(iris[[1]], mu=5)
?t.test
lapply(iris[numind], function(col) {
task52 <- t.test(col, 5)
return(c(t = task52$statistic, df = task52$parameter, task52$p.value))
})
lapply(iris[numind], function(col) {
task52 <- t.test(col, mu=5)
return(c(t = task52$statistic, df = task52$parameter, task52$p.value))
})
?c
lapply(iris[numind], function(col) {
task52 <- t.test(col, mu=5)
return(c(t = task52$statistic, df = task52$parameter, task52$p.value, use.names = F))
})
str(task51)
task51[1]
task51[[1]]
c(task51$statistic, task51$parameter, task51$p.value)
lapply(iris[numind], function(col) {
task52 <- t.test(col, mu=5)
return(c(task52$statistic, task52$parameter, task52$p.value))
})
task51[c(1, 2, 3)]
task51[[c(1, 2, 3)]]
unlist(task51[c(1, 2, 3)])
one_sample_t <- function(df, genmean){
numeric_index <- colnames(df)[sapply(df, is.numeric)]
lapply(df[numeirc_index], function(col) {
testres <- t.test(col, mu = genmean)
return(c(testres$stat, testres$param, testres$p))
})
}
one_sample_t <- function(df, genmean){
numeric_index <- colnames(df)[sapply(df, is.numeric)]
lapply(df[numeirc_index], function(col) {
testres <- t.test(col, mu = genmean)
return(c(testres$stat, testres$param, testres$p))
})
}
one_sample_t(iris)
one_sample_t <- function(df, genmean){
numeric_index <- colnames(df)[sapply(df, is.numeric)]
lapply(df[numeric_index], function(col) {
testres <- t.test(col, mu = genmean)
return(c(testres$stat, testres$param, testres$p))
})
}
one_sample_t(iris)
one_sample_t(iris, 4)
one_sample_t <- function(df, genmean){
numeric_index <- colnames(df)[sapply(df, is.numeric)]
lapply(df[numeric_index], function(col) {
testres <- t.test(col, mu = genmean)
return(c(testres$stat, testres$param, testres$p.value))
})
}
one_sample_t(iris, 4)
normality_tests <- lapply(iris[, 1:4], shapiro.test)
lapply(normality_tests, function(col) col$p.value)
get_p_value <- function(test_list){
lapply(test_list, function(col) col$p.value)
}
get_p_value <- function(test_list){
lapply(test_list, function(col) col$p.value)
}
normality_tests <- lapply(iris[, 1:4], shapiro.test)
get_p_value(normality_tests)
get_p_value <- function(test_list){
lapply(test_list, function(col) return(p.value = col$p.value))
}
get_p_value(normality_tests)
get_p_value <- function(test_list){
lapply(test_list, function(col) return(c(p.value = col$p.value)))
}
get_p_value(normality_tests)
get_p_value <- function(test_list){
lapply(test_list, function(col) return(list(p.value = col$p.value)))
}
get_p_value(normality_tests)
?lapply
lapply(normality_tests, function(col) col$p.value, USE.NAMES = F)
lapply(normality_tests, function(col) col$p.value)
lapply(test_list, function(col) return(list(NULL = col$p.value)))
get_p_value <- function(test_list){
lapply(test_list, function(col) return(list(NULL = col$p.value)))
}
get_p_value(normality_tests)
get_p_value <- function(test_list) {
lapply(test_list, function(col) return(col$p.value))
}
get_p_value(normality_tests)
get_p_value = function(test_data){
sapply(test_data, '[', 2)}
get_p_value(normality_tests)
library(microbenchmark)
get_p_value1 <- function(test_list) {
lapply(test_list, function(col) return(col$p.value))
}
get_p_value2 = function(test_data){
sapply(test_data, '[', 2)}
?microbenchmark
microbenchmark(get_p_value1(normality_tests), get_p_value2(normality_tests))
microbenchmark(get_p_value1(normality_tests), get_p_value2(normality_tests), times = 10000)
task6 <- apply(iris[, 1:4], 1, shapiro.test)
microbenchmark(get_p_value1(task6), get_p_value2(task6), times = 10000)
microbenchmark(get_p_value1(task6), get_p_value2(task6), times = 100)
microbenchmark(get_p_value1(normality_tests), get_p_value2(normality_tests))
knit_with_parameters('/media/glycosylase/EC6A2F256A2EEBD0/Users/miffka/Documents/!DataMining/RAnalysis2/301_rmarkdown1.Rmd')
unlink('/media/glycosylase/EC6A2F256A2EEBD0/Users/miffka/Documents/!DataMining/RAnalysis2/301_rmarkdown1_cache', recursive = TRUE)
setwd("/media/glycosylase/EC6A2F256A2EEBD0/Documents and Settings/miffka/Documents/!DataMining")
setwd("/media/glycosylase/EC6A2F256A2EEBD0/Users/miffka/Documents/!DataMining/Statistics3")
install.packages("lme4") # for mixed models
exp_data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
str(exp_data)
library(ggplot2)
ggplot(exp_data, aes(factor(scenario), frequency, color = attitude))+
geom_boxplot()
ggplot(exp_data, aes(factor(scenario), frequency, fill = attitude))+
geom_boxplot()
ggplot(exp_data, aes(frequency, fill = subject))+
geom_density(alpha = 0.5)+
facet_grid(~gender)
ggplot(exp_data, aes(frequency, fill = subject))+
geom_density(alpha = 0.5)+
facet_grid(gender~)
ggplot(exp_data, aes(frequency, fill = subject))+
geom_density(alpha = 0.5)+
facet_wrap(gender~)
ggplot(exp_data, aes(frequency, fill = subject))+
geom_density(alpha = 0.5)+
facet_grid(~gender)
ggplot(exp_data, aes(frequency, fill = subject))+
geom_density(alpha = 0.5)+
facet_wrap(~gender, nrow = 2)
ggplot(exp_data, aes(frequency, fill = subject))+
geom_density(alpha = 0.5)+
facet_wrap(~gender, dir = "v", strip.position = "right")
ggplot(exp_data, aes(frequency, fill = subject))+
geom_density(alpha = 0.3)+
facet_wrap(~gender, dir = "v", strip.position = "right")
library(lme4)
